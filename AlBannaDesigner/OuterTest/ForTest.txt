
        // Use cooresponding shader when setting uniforms/drawing objects
        lightingShader.Use();
        GLint lightPosLoc        = glGetUniformLocation(lightingShader.Program, "light.position");
        GLint lightSpotdirLoc    = glGetUniformLocation(lightingShader.Program, "light.direction");
        GLint lightSpotCutOffLoc = glGetUniformLocation(lightingShader.Program, "light.cutOff");        
        GLint viewPosLoc         = glGetUniformLocation(lightingShader.Program, "viewPos");
        glUniform3f(lightPosLoc,        camera.Position.x, camera.Position.y, camera.Position.z);
        glUniform3f(lightSpotdirLoc,    camera.Front.x, camera.Front.y, camera.Front.z);
        glUniform1f(lightSpotCutOffLoc, glm::cos(glm::radians(12.5f)));
        glUniform3f(viewPosLoc,         camera.Position.x, camera.Position.y, camera.Position.z);
        // Set lights properties
        glUniform3f(glGetUniformLocation(lightingShader.Program, "light.ambient"),   0.1f, 0.1f, 0.1f);
        // We set the diffuse intensity a bit higher; note that the right lighting conditions differ with each lighting method and environment.
        // Each environment and lighting type requires some tweaking of these variables to get the best out of your environment.
        glUniform3f(glGetUniformLocation(lightingShader.Program, "light.diffuse"),   0.8f, 0.8f, 0.8f);
        glUniform3f(glGetUniformLocation(lightingShader.Program, "light.specular"),  1.0f, 1.0f, 1.0f);
        glUniform1f(glGetUniformLocation(lightingShader.Program, "light.constant"),  1.0f);
        glUniform1f(glGetUniformLocation(lightingShader.Program, "light.linear"),    0.09);
        glUniform1f(glGetUniformLocation(lightingShader.Program, "light.quadratic"), 0.032);
        // Set material properties
        glUniform1f(glGetUniformLocation(lightingShader.Program, "material.shininess"), 32.0f);

        // Create camera transformations
        glm::mat4 view;
        view = camera.GetViewMatrix();
        glm::mat4 projection = glm::perspective(camera.Zoom, (GLfloat)WIDTH / (GLfloat)HEIGHT, 0.1f, 100.0f);
        // Get the uniform locations
        GLint modelLoc = glGetUniformLocation(lightingShader.Program, "model");
        GLint viewLoc  = glGetUniformLocation(lightingShader.Program, "view");
        GLint projLoc  = glGetUniformLocation(lightingShader.Program, "projection");
        // Pass the matrices to the shader
        glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));

        // Bind diffuse map
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, diffuseMap);
        // Bind specular map
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, specularMap);

        // Draw the container (using container's vertex attributes)
        /*glBindVertexArray(containerVAO);
        glm::mat4 model;
        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);*/




















		GLuint SphareViewLocation = glGetUniformLocation(SphareShader.Program, "view");
		glUniformMatrix4fv(SphareViewLocation, 1, GL_FALSE, glm::value_ptr(view));

		GLuint SphareProjectionLocation = glGetUniformLocation(SphareShader.Program, "projection");
		glUniformMatrix4fv(SphareProjectionLocation, 1, GL_FALSE, glm::value_ptr(projection));

		GLuint SphareModelLocation = glGetUniformLocation(SphareShader.Program, "model");
		glm::mat4 SpModel;
		SpModel = glm::translate(SpModel, glm::vec3(2.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(SphareModelLocation, 1, GL_FALSE, glm::value_ptr(SpModel));
		SphareShader.Use();
		glBindVertexArray(VAOspare);
		glDrawElements(GL_TRIANGLES,mySphare->Indices.size() , GL_UNSIGNED_INT,0);

		/////////////////////////////////////////////////////////////////////


//#ifndef __STOP_SHADER_H__
#include"ToShaderBookHighlight.h"
//#endif
#version 330 core
out vec4 color;
uniform vec3 objectColor;
uniform float Time;
in vec3 Normal;
in vec3 FragPos;
uniform vec3 viewPos;
struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
in vec2 TexCoords;
struct  Light
{
	vec3 direction;
//	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform Light light;
uniform Material material;
void main()
{
	vec3 lightDir = normalize(-light.direction);
	vec3 ambient = light.ambient*vec3(texture(material.diffuse, TexCoords));

	//Diffuse
	vec3 norm = normalize(Normal);
//	vec3 lightDir = normalize(light.position - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse*vec3(texture(material.diffuse, TexCoords));

	//Specular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflecDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflecDir), 0.0), material.shininess);
	vec3 specular = light.specular *spec*vec3(texture(material.specular, TexCoords));

	vec3 result = ambient + diffuse + specular;
	color = vec4(result, 1.0f);
}
